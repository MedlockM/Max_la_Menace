{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"draw/","text":"Function find_all_paths \u00b6 Parameters: G (networkx.MultiDiGraph): The graph in which to find the paths. start_station (str): The starting station for the paths. end_station (str): The end station for the paths. max_hops (int): The maximum number of hops allowed in a path. Returns: all_paths (list): A list of all paths from the start station to the end station within the maximum number of hops. Exceptions/Errors: This function does not raise any exceptions or errors. This function finds all paths from the start station to the end station within a specified maximum number of hops in a given graph. It uses a depth-first search (DFS) algorithm to recursively explore the graph and find the paths. The function takes the following parameters: G : The graph in which to find the paths. start_station : The starting station for the paths. end_station : The end station for the paths. max_hops : The maximum number of hops allowed in a path. The function returns a list of all paths from the start station to the end station within the specified maximum number of hops. Example usage: start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\")","title":"Draw"},{"location":"draw/#function-find_all_paths","text":"Parameters: G (networkx.MultiDiGraph): The graph in which to find the paths. start_station (str): The starting station for the paths. end_station (str): The end station for the paths. max_hops (int): The maximum number of hops allowed in a path. Returns: all_paths (list): A list of all paths from the start station to the end station within the maximum number of hops. Exceptions/Errors: This function does not raise any exceptions or errors. This function finds all paths from the start station to the end station within a specified maximum number of hops in a given graph. It uses a depth-first search (DFS) algorithm to recursively explore the graph and find the paths. The function takes the following parameters: G : The graph in which to find the paths. start_station : The starting station for the paths. end_station : The end station for the paths. max_hops : The maximum number of hops allowed in a path. The function returns a list of all paths from the start station to the end station within the specified maximum number of hops. Example usage: start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\")","title":"Function find_all_paths"},{"location":"main/","text":"find_all_paths(G, start_station, end_station, max_hops) \u00b6 This function takes in four parameters: - G : a NetworkX graph object representing a directed multi-graph - start_station : a string representing the starting station - end_station : a string representing the end station - max_hops : an integer representing the maximum number of hops allowed The function finds all possible paths from the start station to the end station within the maximum number of hops specified. It returns a list of all paths found. Parameters: - G (NetworkX graph object): a directed multi-graph representing the train network - start_station (str): the starting station - end_station (str): the end station - max_hops (int): the maximum number of hops allowed Returns: - all_paths (list): a list of lists, where each inner list represents a path and contains tuples of the form (station, departure_time, train_number) Raises: - None","title":"Main"},{"location":"main/#find_all_pathsg-start_station-end_station-max_hops","text":"This function takes in four parameters: - G : a NetworkX graph object representing a directed multi-graph - start_station : a string representing the starting station - end_station : a string representing the end station - max_hops : an integer representing the maximum number of hops allowed The function finds all possible paths from the start station to the end station within the maximum number of hops specified. It returns a list of all paths found. Parameters: - G (NetworkX graph object): a directed multi-graph representing the train network - start_station (str): the starting station - end_station (str): the end station - max_hops (int): the maximum number of hops allowed Returns: - all_paths (list): a list of lists, where each inner list represents a path and contains tuples of the form (station, departure_time, train_number) Raises: - None","title":"find_all_paths(G, start_station, end_station, max_hops)"}]}