{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"draw/","text":"find_all_paths \u00b6 Function to find all paths from the start station to the end station with a maximum number of hops. Parameters: - G (nx.MultiDiGraph): The graph representing train stations and connections. - start_station (str): The name of the start station. - end_station (str): The name of the end station. - max_hops (int): The maximum number of hops allowed in the path. Returns: - all_paths (list): A list of all paths from the start station to the end station. Exceptions/Errors: None Example: start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\")","title":"Draw"},{"location":"draw/#find_all_paths","text":"Function to find all paths from the start station to the end station with a maximum number of hops. Parameters: - G (nx.MultiDiGraph): The graph representing train stations and connections. - start_station (str): The name of the start station. - end_station (str): The name of the end station. - max_hops (int): The maximum number of hops allowed in the path. Returns: - all_paths (list): A list of all paths from the start station to the end station. Exceptions/Errors: None Example: start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\")","title":"find_all_paths"},{"location":"main/","text":"Function find_all_paths(G, start_station, end_station, max_hops) \u00b6 This function finds all paths between two stations in a given graph, with a maximum number of hops. Parameters: G (networkx.MultiDiGraph) - The graph representing train connections. start_station (string) - The starting station name. end_station (string) - The destination station name. max_hops (int) - The maximum number of hops allowed to reach the destination. Returns: all_paths (list) - A list of all paths between the start and end stations. Exceptions/Errors: None","title":"Main"},{"location":"main/#function-find_all_pathsg-start_station-end_station-max_hops","text":"This function finds all paths between two stations in a given graph, with a maximum number of hops. Parameters: G (networkx.MultiDiGraph) - The graph representing train connections. start_station (string) - The starting station name. end_station (string) - The destination station name. max_hops (int) - The maximum number of hops allowed to reach the destination. Returns: all_paths (list) - A list of all paths between the start and end stations. Exceptions/Errors: None","title":"Function find_all_paths(G, start_station, end_station, max_hops)"}]}