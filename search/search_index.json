{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"draw/","text":"find_all_paths(G, start_station, end_station, max_hops) \u00b6 This is a function that takes a MultiDiGraph, start_station, end_station, and max_hops as arguments and returns all paths from the start station to the end station with a maximum number of hops. Parameters : G ( networkx.classes.multidigraph.MultiDiGraph ): The MultiDiGraph. start_station ( str ): The start station. end_station ( str ): The end station. max_hops ( int ): The maximum number of hops allowed. Returns : all_paths ( list of list of tuples ): All possible paths from the start to the end within the maximum allowed hops. Each path is represented as a list of tuples where each tuple is a step in the path and contains the neighbor, departure time, and the key of a train journey. Raises : This function does not raise any exceptions. ------------------------------------------------------------------------------------------------------------------------","title":"Draw"},{"location":"draw/#find_all_pathsg-start_station-end_station-max_hops","text":"This is a function that takes a MultiDiGraph, start_station, end_station, and max_hops as arguments and returns all paths from the start station to the end station with a maximum number of hops. Parameters : G ( networkx.classes.multidigraph.MultiDiGraph ): The MultiDiGraph. start_station ( str ): The start station. end_station ( str ): The end station. max_hops ( int ): The maximum number of hops allowed. Returns : all_paths ( list of list of tuples ): All possible paths from the start to the end within the maximum allowed hops. Each path is represented as a list of tuples where each tuple is a step in the path and contains the neighbor, departure time, and the key of a train journey. Raises : This function does not raise any exceptions. ------------------------------------------------------------------------------------------------------------------------","title":"find_all_paths(G, start_station, end_station, max_hops)"},{"location":"main/","text":"find_all_paths Function \u00b6 This function accepts a networkx graph, a starting station, an ending station, and a maximum number of hops. It explores all possible paths between the start station and end station within the limit of max hops through a DFS. The function stores a path if it reaches the destination within the maximum number of hops. Parameters G (nx.MultiDiGraph): The graph on which to find paths. start_station (str): The starting station of the paths. end_station (str): The ending station of the paths. max_hops (int): The maximum number of hops allowed for a path. Returns all_paths (list): List of all the valid paths found. Errors/Exceptions This function presumes that the graph G is correctly initialized and contains the start_station and end_station . Else, it will not return meaningful results. index Function \u00b6 Renders the index.html page with a list of sorted stations. Parameters None Returns HTML Template: The rendered index.html page containing the list of sorted stations. Errors/Exceptions If the index.html page does not exist in the application's templates folder, this function will throw an error. search Function \u00b6 This function accepts user inputted data via a POST request. It filters a DataFrame based on this input data and calculates all the valid paths from the starting station to ending station given the maximum number of hops. It then renders the search.html page along with the valid paths. Parameters None Returns HTML Template: The rendered search.html page containing the list of valid paths from the start station to end station with the inputted maximum number of hops. Errors/Exceptions If user input data is not provided properly, this function may fail or produce unexpected results. This function also expects the search.html page to exist in the application's templates folder. If it does not exist, the function will throw an error.","title":"Main"},{"location":"main/#find_all_paths-function","text":"This function accepts a networkx graph, a starting station, an ending station, and a maximum number of hops. It explores all possible paths between the start station and end station within the limit of max hops through a DFS. The function stores a path if it reaches the destination within the maximum number of hops. Parameters G (nx.MultiDiGraph): The graph on which to find paths. start_station (str): The starting station of the paths. end_station (str): The ending station of the paths. max_hops (int): The maximum number of hops allowed for a path. Returns all_paths (list): List of all the valid paths found. Errors/Exceptions This function presumes that the graph G is correctly initialized and contains the start_station and end_station . Else, it will not return meaningful results.","title":"find_all_paths Function"},{"location":"main/#index-function","text":"Renders the index.html page with a list of sorted stations. Parameters None Returns HTML Template: The rendered index.html page containing the list of sorted stations. Errors/Exceptions If the index.html page does not exist in the application's templates folder, this function will throw an error.","title":"index Function"},{"location":"main/#search-function","text":"This function accepts user inputted data via a POST request. It filters a DataFrame based on this input data and calculates all the valid paths from the starting station to ending station given the maximum number of hops. It then renders the search.html page along with the valid paths. Parameters None Returns HTML Template: The rendered search.html page containing the list of valid paths from the start station to end station with the inputted maximum number of hops. Errors/Exceptions If user input data is not provided properly, this function may fail or produce unexpected results. This function also expects the search.html page to exist in the application's templates folder. If it does not exist, the function will throw an error.","title":"search Function"}]}