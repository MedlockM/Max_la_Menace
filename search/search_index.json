{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"draw/","text":"The find_all_paths function is used to find all paths from a start station to an end station within a maximum number of hops in a given graph. def find_all_paths(G, start_station, end_station, max_hops): \"\"\"Find all paths from start station to end station with a maximum number of hops. Parameters: - G (networkx.MultiDiGraph): The graph representing the train connections. - start_station (str): The name of the start station. - end_station (str): The name of the end station. - max_hops (int): The maximum number of hops. Returns: - all_paths (list): A list of all paths from start station to end station. Raises: - None. \"\"\" # List to store all paths all_paths = [] # Recursive function to explore the graph def dfs(current_station, hops, path): \"\"\"Depth-first search (DFS) recursive function to explore the graph. Parameters: - current_station (str): The name of the current station. - hops (int): The number of hops. - path (list): The list of visited stations. Returns: - None. Raises: - None. \"\"\" # Base case: we've reached the end station if current_station == end_station: all_paths.append(path) hops = 0 return # Explore the neighbors of the current station for departure, neighbor, key in G.edges(current_station, keys=True): if neighbor not in [step[0] for step in path]: # Check if we've exceeded the maximum number of hops if hops < max_hops: if hops != 0: last_train_arrival_time = datetime.datetime.strptime(G[path[-2][0]][path[-1][0]][path[-1][2]][\"heure_arrivee\"], '%H:%M').time() else: last_train_arrival_time = datetime.datetime.strptime('00:00', '%H:%M').time() current_train_departure_time = datetime.datetime.strptime(G[current_station][neighbor][key][\"heure_depart\"], '%H:%M').time() if current_train_departure_time > last_train_arrival_time: dfs(neighbor, hops + 1, path + [(neighbor, current_train_departure_time, key)]) # Call the recursive function starting from the start station dfs(start_station, 0, [(start_station, datetime.time(0, 0), 0)]) return all_paths Example usage: \u00b6 start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\") The example demonstrates how to use the find_all_paths function. It finds all paths from the start station \"MARSEILLE ST CHARLES\" to the end station \"LYON (intramuros)\" within a maximum of 6 hops. If any paths are found, it prints the paths. Otherwise, it prints \"No paths found\". Please note that the above example assumes that the G graph and other required variables have been defined and initialized prior to calling the find_all_paths function.","title":"Draw"},{"location":"draw/#example-usage","text":"start_station = \"MARSEILLE ST CHARLES\" end_station = \"LYON (intramuros)\" max_hops = 6 paths = find_all_paths(G, start_station, end_station, max_hops) if paths: for path in paths: print(f\"Path: {path}\") else: print(\"No paths found\") The example demonstrates how to use the find_all_paths function. It finds all paths from the start station \"MARSEILLE ST CHARLES\" to the end station \"LYON (intramuros)\" within a maximum of 6 hops. If any paths are found, it prints the paths. Otherwise, it prints \"No paths found\". Please note that the above example assumes that the G graph and other required variables have been defined and initialized prior to calling the find_all_paths function.","title":"Example usage:"},{"location":"main/","text":"find_all_paths \u00b6 Parameters : - G (type: networkx.classes.multidigraph.MultiDiGraph ) - The graph representing the train network. - start_station (type: str ) - The starting station for finding paths. - end_station (type: str ) - The ending station for finding paths. - max_hops (type: int ) - The maximum number of hops allowed in a path. Return : - all_paths (type: list ) - A list containing all paths from the start station to the end station within the maximum number of hops. Exception/Errors : - None. index \u00b6 Parameters : - None. Return : - render_template (type: flask.templating.RenderTemplate ) - The HTML template for the index page. Exception/Errors : - None. search \u00b6 Parameters : - None. Return : - render_template (type: flask.templating.RenderTemplate ) - The HTML template for the search page. Exception/Errors : - None.","title":"Main"},{"location":"main/#find_all_paths","text":"Parameters : - G (type: networkx.classes.multidigraph.MultiDiGraph ) - The graph representing the train network. - start_station (type: str ) - The starting station for finding paths. - end_station (type: str ) - The ending station for finding paths. - max_hops (type: int ) - The maximum number of hops allowed in a path. Return : - all_paths (type: list ) - A list containing all paths from the start station to the end station within the maximum number of hops. Exception/Errors : - None.","title":"find_all_paths"},{"location":"main/#index","text":"Parameters : - None. Return : - render_template (type: flask.templating.RenderTemplate ) - The HTML template for the index page. Exception/Errors : - None.","title":"index"},{"location":"main/#search","text":"Parameters : - None. Return : - render_template (type: flask.templating.RenderTemplate ) - The HTML template for the search page. Exception/Errors : - None.","title":"search"}]}